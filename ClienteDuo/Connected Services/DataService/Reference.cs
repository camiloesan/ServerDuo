//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteDuo.DataService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/CommunicationService")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PartyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PictureIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalWinsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PartyCode {
            get {
                return this.PartyCodeField;
            }
            set {
                if ((this.PartyCodeField.Equals(value) != true)) {
                    this.PartyCodeField = value;
                    this.RaisePropertyChanged("PartyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PictureID {
            get {
                return this.PictureIDField;
            }
            set {
                if ((this.PictureIDField.Equals(value) != true)) {
                    this.PictureIDField = value;
                    this.RaisePropertyChanged("PictureID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalWins {
            get {
                return this.TotalWinsField;
            }
            set {
                if ((this.TotalWinsField.Equals(value) != true)) {
                    this.TotalWinsField = value;
                    this.RaisePropertyChanged("TotalWins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendRequestDTO", Namespace="http://schemas.datacontract.org/2004/07/CommunicationService")]
    [System.SerializableAttribute()]
    public partial class FriendRequestDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FriendRequestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReceiverIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SenderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FriendRequestID {
            get {
                return this.FriendRequestIDField;
            }
            set {
                if ((this.FriendRequestIDField.Equals(value) != true)) {
                    this.FriendRequestIDField = value;
                    this.RaisePropertyChanged("FriendRequestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReceiverID {
            get {
                return this.ReceiverIDField;
            }
            set {
                if ((this.ReceiverIDField.Equals(value) != true)) {
                    this.ReceiverIDField = value;
                    this.RaisePropertyChanged("ReceiverID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiverUsername {
            get {
                return this.ReceiverUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverUsernameField, value) != true)) {
                    this.ReceiverUsernameField = value;
                    this.RaisePropertyChanged("ReceiverUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SenderID {
            get {
                return this.SenderIDField;
            }
            set {
                if ((this.SenderIDField.Equals(value) != true)) {
                    this.SenderIDField = value;
                    this.RaisePropertyChanged("SenderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderUsername {
            get {
                return this.SenderUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderUsernameField, value) != true)) {
                    this.SenderUsernameField = value;
                    this.RaisePropertyChanged("SenderUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendshipDTO", Namespace="http://schemas.datacontract.org/2004/07/CommunicationService")]
    [System.SerializableAttribute()]
    public partial class FriendshipDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Friend1IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Friend1UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Friend2IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Friend2UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FriendshipIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Friend1ID {
            get {
                return this.Friend1IDField;
            }
            set {
                if ((this.Friend1IDField.Equals(value) != true)) {
                    this.Friend1IDField = value;
                    this.RaisePropertyChanged("Friend1ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Friend1Username {
            get {
                return this.Friend1UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.Friend1UsernameField, value) != true)) {
                    this.Friend1UsernameField = value;
                    this.RaisePropertyChanged("Friend1Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Friend2ID {
            get {
                return this.Friend2IDField;
            }
            set {
                if ((this.Friend2IDField.Equals(value) != true)) {
                    this.Friend2IDField = value;
                    this.RaisePropertyChanged("Friend2ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Friend2Username {
            get {
                return this.Friend2UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.Friend2UsernameField, value) != true)) {
                    this.Friend2UsernameField = value;
                    this.RaisePropertyChanged("Friend2Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FriendshipID {
            get {
                return this.FriendshipIDField;
            }
            set {
                if ((this.FriendshipIDField.Equals(value) != true)) {
                    this.FriendshipIDField = value;
                    this.RaisePropertyChanged("FriendshipID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserBlockedDTO", Namespace="http://schemas.datacontract.org/2004/07/CommunicationService")]
    [System.SerializableAttribute()]
    public partial class UserBlockedDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BlockIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BlockedIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BlockedUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlockID {
            get {
                return this.BlockIDField;
            }
            set {
                if ((this.BlockIDField.Equals(value) != true)) {
                    this.BlockIDField = value;
                    this.RaisePropertyChanged("BlockID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlockedID {
            get {
                return this.BlockedIDField;
            }
            set {
                if ((this.BlockedIDField.Equals(value) != true)) {
                    this.BlockedIDField = value;
                    this.RaisePropertyChanged("BlockedID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BlockedUsername {
            get {
                return this.BlockedUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.BlockedUsernameField, value) != true)) {
                    this.BlockedUsernameField = value;
                    this.RaisePropertyChanged("BlockedUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/CommunicationService")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.IUsersManager")]
    public interface IUsersManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/UpdateProfilePictureByUserId", ReplyAction="http://tempuri.org/IUsersManager/UpdateProfilePictureByUserIdResponse")]
        int UpdateProfilePictureByUserId(int userId, int pictureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/UpdateProfilePictureByUserId", ReplyAction="http://tempuri.org/IUsersManager/UpdateProfilePictureByUserIdResponse")]
        System.Threading.Tasks.Task<int> UpdateProfilePictureByUserIdAsync(int userId, int pictureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetUserInfoByUsername", ReplyAction="http://tempuri.org/IUsersManager/GetUserInfoByUsernameResponse")]
        ClienteDuo.DataService.UserDTO GetUserInfoByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetUserInfoByUsername", ReplyAction="http://tempuri.org/IUsersManager/GetUserInfoByUsernameResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.UserDTO> GetUserInfoByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/AddUserToDatabase", ReplyAction="http://tempuri.org/IUsersManager/AddUserToDatabaseResponse")]
        int AddUserToDatabase(ClienteDuo.DataService.UserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/AddUserToDatabase", ReplyAction="http://tempuri.org/IUsersManager/AddUserToDatabaseResponse")]
        System.Threading.Tasks.Task<int> AddUserToDatabaseAsync(ClienteDuo.DataService.UserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/DeleteUserFromDatabaseByUsername", ReplyAction="http://tempuri.org/IUsersManager/DeleteUserFromDatabaseByUsernameResponse")]
        bool DeleteUserFromDatabaseByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/DeleteUserFromDatabaseByUsername", ReplyAction="http://tempuri.org/IUsersManager/DeleteUserFromDatabaseByUsernameResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserFromDatabaseByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsLoginValid", ReplyAction="http://tempuri.org/IUsersManager/IsLoginValidResponse")]
        ClienteDuo.DataService.UserDTO IsLoginValid(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsLoginValid", ReplyAction="http://tempuri.org/IUsersManager/IsLoginValidResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.UserDTO> IsLoginValidAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUsernameTaken", ReplyAction="http://tempuri.org/IUsersManager/IsUsernameTakenResponse")]
        bool IsUsernameTaken(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUsernameTaken", ReplyAction="http://tempuri.org/IUsersManager/IsUsernameTakenResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameTakenAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsEmailTaken", ReplyAction="http://tempuri.org/IUsersManager/IsEmailTakenResponse")]
        bool IsEmailTaken(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsEmailTaken", ReplyAction="http://tempuri.org/IUsersManager/IsEmailTakenResponse")]
        System.Threading.Tasks.Task<bool> IsEmailTakenAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/SendFriendRequest", ReplyAction="http://tempuri.org/IUsersManager/SendFriendRequestResponse")]
        int SendFriendRequest(string usernameSender, string usernameReceiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/SendFriendRequest", ReplyAction="http://tempuri.org/IUsersManager/SendFriendRequestResponse")]
        System.Threading.Tasks.Task<int> SendFriendRequestAsync(string usernameSender, string usernameReceiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsFriendRequestAlreadyExistent", ReplyAction="http://tempuri.org/IUsersManager/IsFriendRequestAlreadyExistentResponse")]
        bool IsFriendRequestAlreadyExistent(string usernameSender, string usernameReceiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsFriendRequestAlreadyExistent", ReplyAction="http://tempuri.org/IUsersManager/IsFriendRequestAlreadyExistentResponse")]
        System.Threading.Tasks.Task<bool> IsFriendRequestAlreadyExistentAsync(string usernameSender, string usernameReceiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/AcceptFriendRequest", ReplyAction="http://tempuri.org/IUsersManager/AcceptFriendRequestResponse")]
        bool AcceptFriendRequest(ClienteDuo.DataService.FriendRequestDTO friendRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/AcceptFriendRequest", ReplyAction="http://tempuri.org/IUsersManager/AcceptFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> AcceptFriendRequestAsync(ClienteDuo.DataService.FriendRequestDTO friendRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/RejectFriendRequest", ReplyAction="http://tempuri.org/IUsersManager/RejectFriendRequestResponse")]
        bool RejectFriendRequest(int friendRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/RejectFriendRequest", ReplyAction="http://tempuri.org/IUsersManager/RejectFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> RejectFriendRequestAsync(int friendRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetFriendRequestsList", ReplyAction="http://tempuri.org/IUsersManager/GetFriendRequestsListResponse")]
        ClienteDuo.DataService.FriendRequestDTO[] GetFriendRequestsList(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetFriendRequestsList", ReplyAction="http://tempuri.org/IUsersManager/GetFriendRequestsListResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.FriendRequestDTO[]> GetFriendRequestsListAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetFriendsList", ReplyAction="http://tempuri.org/IUsersManager/GetFriendsListResponse")]
        ClienteDuo.DataService.FriendshipDTO[] GetFriendsList(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetFriendsList", ReplyAction="http://tempuri.org/IUsersManager/GetFriendsListResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.FriendshipDTO[]> GetFriendsListAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetOnlineFriends", ReplyAction="http://tempuri.org/IUsersManager/GetOnlineFriendsResponse")]
        ClienteDuo.DataService.FriendshipDTO[] GetOnlineFriends(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetOnlineFriends", ReplyAction="http://tempuri.org/IUsersManager/GetOnlineFriendsResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.FriendshipDTO[]> GetOnlineFriendsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/DeleteFriendshipById", ReplyAction="http://tempuri.org/IUsersManager/DeleteFriendshipByIdResponse")]
        bool DeleteFriendshipById(int friendshipId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/DeleteFriendshipById", ReplyAction="http://tempuri.org/IUsersManager/DeleteFriendshipByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteFriendshipByIdAsync(int friendshipId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsAlreadyFriend", ReplyAction="http://tempuri.org/IUsersManager/IsAlreadyFriendResponse")]
        bool IsAlreadyFriend(string senderUsername, string receiverUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsAlreadyFriend", ReplyAction="http://tempuri.org/IUsersManager/IsAlreadyFriendResponse")]
        System.Threading.Tasks.Task<bool> IsAlreadyFriendAsync(string senderUsername, string receiverUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUserAlreadyLoggedIn", ReplyAction="http://tempuri.org/IUsersManager/IsUserAlreadyLoggedInResponse")]
        bool IsUserAlreadyLoggedIn(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUserAlreadyLoggedIn", ReplyAction="http://tempuri.org/IUsersManager/IsUserAlreadyLoggedInResponse")]
        System.Threading.Tasks.Task<bool> IsUserAlreadyLoggedInAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/SendConfirmationCode", ReplyAction="http://tempuri.org/IUsersManager/SendConfirmationCodeResponse")]
        int SendConfirmationCode(string email, string lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/SendConfirmationCode", ReplyAction="http://tempuri.org/IUsersManager/SendConfirmationCodeResponse")]
        System.Threading.Tasks.Task<int> SendConfirmationCodeAsync(string email, string lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ModifyPasswordByEmail", ReplyAction="http://tempuri.org/IUsersManager/ModifyPasswordByEmailResponse")]
        int ModifyPasswordByEmail(string email, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ModifyPasswordByEmail", ReplyAction="http://tempuri.org/IUsersManager/ModifyPasswordByEmailResponse")]
        System.Threading.Tasks.Task<int> ModifyPasswordByEmailAsync(string email, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/BlockUserByUsername", ReplyAction="http://tempuri.org/IUsersManager/BlockUserByUsernameResponse")]
        int BlockUserByUsername(string blockerUsername, string blockedUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/BlockUserByUsername", ReplyAction="http://tempuri.org/IUsersManager/BlockUserByUsernameResponse")]
        System.Threading.Tasks.Task<int> BlockUserByUsernameAsync(string blockerUsername, string blockedUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/UnblockUserByBlockId", ReplyAction="http://tempuri.org/IUsersManager/UnblockUserByBlockIdResponse")]
        int UnblockUserByBlockId(int blockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/UnblockUserByBlockId", ReplyAction="http://tempuri.org/IUsersManager/UnblockUserByBlockIdResponse")]
        System.Threading.Tasks.Task<int> UnblockUserByBlockIdAsync(int blockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUserBlockedByUsername", ReplyAction="http://tempuri.org/IUsersManager/IsUserBlockedByUsernameResponse")]
        bool IsUserBlockedByUsername(string usernameBlocker, string usernameBlocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUserBlockedByUsername", ReplyAction="http://tempuri.org/IUsersManager/IsUserBlockedByUsernameResponse")]
        System.Threading.Tasks.Task<bool> IsUserBlockedByUsernameAsync(string usernameBlocker, string usernameBlocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetBlockedUsersListByUserId", ReplyAction="http://tempuri.org/IUsersManager/GetBlockedUsersListByUserIdResponse")]
        ClienteDuo.DataService.UserBlockedDTO[] GetBlockedUsersListByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetBlockedUsersListByUserId", ReplyAction="http://tempuri.org/IUsersManager/GetBlockedUsersListByUserIdResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.UserBlockedDTO[]> GetBlockedUsersListByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetTopTenWinners", ReplyAction="http://tempuri.org/IUsersManager/GetTopTenWinnersResponse")]
        ClienteDuo.DataService.UserDTO[] GetTopTenWinners();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetTopTenWinners", ReplyAction="http://tempuri.org/IUsersManager/GetTopTenWinnersResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.UserDTO[]> GetTopTenWinnersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUserBanned", ReplyAction="http://tempuri.org/IUsersManager/IsUserBannedResponse")]
        bool IsUserBanned(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUserBanned", ReplyAction="http://tempuri.org/IUsersManager/IsUserBannedResponse")]
        System.Threading.Tasks.Task<bool> IsUserBannedAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUsersManagerChannel : ClienteDuo.DataService.IUsersManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UsersManagerClient : System.ServiceModel.ClientBase<ClienteDuo.DataService.IUsersManager>, ClienteDuo.DataService.IUsersManager {
        
        public UsersManagerClient() {
        }
        
        public UsersManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UsersManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int UpdateProfilePictureByUserId(int userId, int pictureId) {
            return base.Channel.UpdateProfilePictureByUserId(userId, pictureId);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProfilePictureByUserIdAsync(int userId, int pictureId) {
            return base.Channel.UpdateProfilePictureByUserIdAsync(userId, pictureId);
        }
        
        public ClienteDuo.DataService.UserDTO GetUserInfoByUsername(string username) {
            return base.Channel.GetUserInfoByUsername(username);
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.UserDTO> GetUserInfoByUsernameAsync(string username) {
            return base.Channel.GetUserInfoByUsernameAsync(username);
        }
        
        public int AddUserToDatabase(ClienteDuo.DataService.UserDTO user) {
            return base.Channel.AddUserToDatabase(user);
        }
        
        public System.Threading.Tasks.Task<int> AddUserToDatabaseAsync(ClienteDuo.DataService.UserDTO user) {
            return base.Channel.AddUserToDatabaseAsync(user);
        }
        
        public bool DeleteUserFromDatabaseByUsername(string username) {
            return base.Channel.DeleteUserFromDatabaseByUsername(username);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserFromDatabaseByUsernameAsync(string username) {
            return base.Channel.DeleteUserFromDatabaseByUsernameAsync(username);
        }
        
        public ClienteDuo.DataService.UserDTO IsLoginValid(string username, string password) {
            return base.Channel.IsLoginValid(username, password);
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.UserDTO> IsLoginValidAsync(string username, string password) {
            return base.Channel.IsLoginValidAsync(username, password);
        }
        
        public bool IsUsernameTaken(string username) {
            return base.Channel.IsUsernameTaken(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameTakenAsync(string username) {
            return base.Channel.IsUsernameTakenAsync(username);
        }
        
        public bool IsEmailTaken(string email) {
            return base.Channel.IsEmailTaken(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailTakenAsync(string email) {
            return base.Channel.IsEmailTakenAsync(email);
        }
        
        public int SendFriendRequest(string usernameSender, string usernameReceiver) {
            return base.Channel.SendFriendRequest(usernameSender, usernameReceiver);
        }
        
        public System.Threading.Tasks.Task<int> SendFriendRequestAsync(string usernameSender, string usernameReceiver) {
            return base.Channel.SendFriendRequestAsync(usernameSender, usernameReceiver);
        }
        
        public bool IsFriendRequestAlreadyExistent(string usernameSender, string usernameReceiver) {
            return base.Channel.IsFriendRequestAlreadyExistent(usernameSender, usernameReceiver);
        }
        
        public System.Threading.Tasks.Task<bool> IsFriendRequestAlreadyExistentAsync(string usernameSender, string usernameReceiver) {
            return base.Channel.IsFriendRequestAlreadyExistentAsync(usernameSender, usernameReceiver);
        }
        
        public bool AcceptFriendRequest(ClienteDuo.DataService.FriendRequestDTO friendRequest) {
            return base.Channel.AcceptFriendRequest(friendRequest);
        }
        
        public System.Threading.Tasks.Task<bool> AcceptFriendRequestAsync(ClienteDuo.DataService.FriendRequestDTO friendRequest) {
            return base.Channel.AcceptFriendRequestAsync(friendRequest);
        }
        
        public bool RejectFriendRequest(int friendRequestId) {
            return base.Channel.RejectFriendRequest(friendRequestId);
        }
        
        public System.Threading.Tasks.Task<bool> RejectFriendRequestAsync(int friendRequestId) {
            return base.Channel.RejectFriendRequestAsync(friendRequestId);
        }
        
        public ClienteDuo.DataService.FriendRequestDTO[] GetFriendRequestsList(int userId) {
            return base.Channel.GetFriendRequestsList(userId);
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.FriendRequestDTO[]> GetFriendRequestsListAsync(int userId) {
            return base.Channel.GetFriendRequestsListAsync(userId);
        }
        
        public ClienteDuo.DataService.FriendshipDTO[] GetFriendsList(int userId) {
            return base.Channel.GetFriendsList(userId);
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.FriendshipDTO[]> GetFriendsListAsync(int userId) {
            return base.Channel.GetFriendsListAsync(userId);
        }
        
        public ClienteDuo.DataService.FriendshipDTO[] GetOnlineFriends(int userId) {
            return base.Channel.GetOnlineFriends(userId);
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.FriendshipDTO[]> GetOnlineFriendsAsync(int userId) {
            return base.Channel.GetOnlineFriendsAsync(userId);
        }
        
        public bool DeleteFriendshipById(int friendshipId) {
            return base.Channel.DeleteFriendshipById(friendshipId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFriendshipByIdAsync(int friendshipId) {
            return base.Channel.DeleteFriendshipByIdAsync(friendshipId);
        }
        
        public bool IsAlreadyFriend(string senderUsername, string receiverUsername) {
            return base.Channel.IsAlreadyFriend(senderUsername, receiverUsername);
        }
        
        public System.Threading.Tasks.Task<bool> IsAlreadyFriendAsync(string senderUsername, string receiverUsername) {
            return base.Channel.IsAlreadyFriendAsync(senderUsername, receiverUsername);
        }
        
        public bool IsUserAlreadyLoggedIn(string username) {
            return base.Channel.IsUserAlreadyLoggedIn(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserAlreadyLoggedInAsync(string username) {
            return base.Channel.IsUserAlreadyLoggedInAsync(username);
        }
        
        public int SendConfirmationCode(string email, string lang) {
            return base.Channel.SendConfirmationCode(email, lang);
        }
        
        public System.Threading.Tasks.Task<int> SendConfirmationCodeAsync(string email, string lang) {
            return base.Channel.SendConfirmationCodeAsync(email, lang);
        }
        
        public int ModifyPasswordByEmail(string email, string newPassword) {
            return base.Channel.ModifyPasswordByEmail(email, newPassword);
        }
        
        public System.Threading.Tasks.Task<int> ModifyPasswordByEmailAsync(string email, string newPassword) {
            return base.Channel.ModifyPasswordByEmailAsync(email, newPassword);
        }
        
        public int BlockUserByUsername(string blockerUsername, string blockedUsername) {
            return base.Channel.BlockUserByUsername(blockerUsername, blockedUsername);
        }
        
        public System.Threading.Tasks.Task<int> BlockUserByUsernameAsync(string blockerUsername, string blockedUsername) {
            return base.Channel.BlockUserByUsernameAsync(blockerUsername, blockedUsername);
        }
        
        public int UnblockUserByBlockId(int blockId) {
            return base.Channel.UnblockUserByBlockId(blockId);
        }
        
        public System.Threading.Tasks.Task<int> UnblockUserByBlockIdAsync(int blockId) {
            return base.Channel.UnblockUserByBlockIdAsync(blockId);
        }
        
        public bool IsUserBlockedByUsername(string usernameBlocker, string usernameBlocked) {
            return base.Channel.IsUserBlockedByUsername(usernameBlocker, usernameBlocked);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserBlockedByUsernameAsync(string usernameBlocker, string usernameBlocked) {
            return base.Channel.IsUserBlockedByUsernameAsync(usernameBlocker, usernameBlocked);
        }
        
        public ClienteDuo.DataService.UserBlockedDTO[] GetBlockedUsersListByUserId(int userId) {
            return base.Channel.GetBlockedUsersListByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.UserBlockedDTO[]> GetBlockedUsersListByUserIdAsync(int userId) {
            return base.Channel.GetBlockedUsersListByUserIdAsync(userId);
        }
        
        public ClienteDuo.DataService.UserDTO[] GetTopTenWinners() {
            return base.Channel.GetTopTenWinners();
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.UserDTO[]> GetTopTenWinnersAsync() {
            return base.Channel.GetTopTenWinnersAsync();
        }
        
        public bool IsUserBanned(int userId) {
            return base.Channel.IsUserBanned(userId);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserBannedAsync(int userId) {
            return base.Channel.IsUserBannedAsync(userId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.IUserConnectionHandler")]
    public interface IUserConnectionHandler {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserConnectionHandler/NotifyLogIn", ReplyAction="http://tempuri.org/IUserConnectionHandler/NotifyLogInResponse")]
        void NotifyLogIn(ClienteDuo.DataService.UserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserConnectionHandler/NotifyLogIn", ReplyAction="http://tempuri.org/IUserConnectionHandler/NotifyLogInResponse")]
        System.Threading.Tasks.Task NotifyLogInAsync(ClienteDuo.DataService.UserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserConnectionHandler/NotifyLogOut", ReplyAction="http://tempuri.org/IUserConnectionHandler/NotifyLogOutResponse")]
        void NotifyLogOut(ClienteDuo.DataService.UserDTO user, bool isHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserConnectionHandler/NotifyLogOut", ReplyAction="http://tempuri.org/IUserConnectionHandler/NotifyLogOutResponse")]
        System.Threading.Tasks.Task NotifyLogOutAsync(ClienteDuo.DataService.UserDTO user, bool isHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserConnectionHandler/NotifyGuestLeft", ReplyAction="http://tempuri.org/IUserConnectionHandler/NotifyGuestLeftResponse")]
        void NotifyGuestLeft(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserConnectionHandler/NotifyGuestLeft", ReplyAction="http://tempuri.org/IUserConnectionHandler/NotifyGuestLeftResponse")]
        System.Threading.Tasks.Task NotifyGuestLeftAsync(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserConnectionHandler/LogOut", ReplyAction="http://tempuri.org/IUserConnectionHandler/LogOutResponse")]
        void LogOut(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserConnectionHandler/LogOut", ReplyAction="http://tempuri.org/IUserConnectionHandler/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserConnectionHandlerChannel : ClienteDuo.DataService.IUserConnectionHandler, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserConnectionHandlerClient : System.ServiceModel.ClientBase<ClienteDuo.DataService.IUserConnectionHandler>, ClienteDuo.DataService.IUserConnectionHandler {
        
        public UserConnectionHandlerClient() {
        }
        
        public UserConnectionHandlerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserConnectionHandlerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserConnectionHandlerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserConnectionHandlerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void NotifyLogIn(ClienteDuo.DataService.UserDTO user) {
            base.Channel.NotifyLogIn(user);
        }
        
        public System.Threading.Tasks.Task NotifyLogInAsync(ClienteDuo.DataService.UserDTO user) {
            return base.Channel.NotifyLogInAsync(user);
        }
        
        public void NotifyLogOut(ClienteDuo.DataService.UserDTO user, bool isHost) {
            base.Channel.NotifyLogOut(user, isHost);
        }
        
        public System.Threading.Tasks.Task NotifyLogOutAsync(ClienteDuo.DataService.UserDTO user, bool isHost) {
            return base.Channel.NotifyLogOutAsync(user, isHost);
        }
        
        public void NotifyGuestLeft(int partyCode, string username) {
            base.Channel.NotifyGuestLeft(partyCode, username);
        }
        
        public System.Threading.Tasks.Task NotifyGuestLeftAsync(int partyCode, string username) {
            return base.Channel.NotifyGuestLeftAsync(partyCode, username);
        }
        
        public void LogOut(string username) {
            base.Channel.LogOut(username);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(string username) {
            return base.Channel.LogOutAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.IPartyManager", CallbackContract=typeof(ClienteDuo.DataService.IPartyManagerCallback))]
    public interface IPartyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyCreateParty")]
        void NotifyCreateParty(int partyCode, string hostUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyCreateParty")]
        System.Threading.Tasks.Task NotifyCreatePartyAsync(int partyCode, string hostUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyJoinParty")]
        void NotifyJoinParty(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyJoinParty")]
        System.Threading.Tasks.Task NotifyJoinPartyAsync(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifySendMessage")]
        void NotifySendMessage(int partyCode, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifySendMessage")]
        System.Threading.Tasks.Task NotifySendMessageAsync(int partyCode, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyLeaveParty")]
        void NotifyLeaveParty(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyLeaveParty")]
        System.Threading.Tasks.Task NotifyLeavePartyAsync(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyCloseParty")]
        void NotifyCloseParty(int partyCode, string hostName, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyCloseParty")]
        System.Threading.Tasks.Task NotifyClosePartyAsync(int partyCode, string hostName, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyStartGame")]
        void NotifyStartGame(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyStartGame")]
        System.Threading.Tasks.Task NotifyStartGameAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyKickPlayer")]
        void NotifyKickPlayer(int partyCode, string username, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyManager/NotifyKickPlayer")]
        System.Threading.Tasks.Task NotifyKickPlayerAsync(int partyCode, string username, string reason);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/PartyCreated", ReplyAction="http://tempuri.org/IPartyManager/PartyCreatedResponse")]
        void PartyCreated(System.Collections.Generic.Dictionary<string, object> playersInLobby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/PlayerJoined", ReplyAction="http://tempuri.org/IPartyManager/PlayerJoinedResponse")]
        void PlayerJoined(System.Collections.Generic.Dictionary<string, object> playersInLobby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/MessageReceived", ReplyAction="http://tempuri.org/IPartyManager/MessageReceivedResponse")]
        void MessageReceived(string messageSent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/PlayerLeft", ReplyAction="http://tempuri.org/IPartyManager/PlayerLeftResponse")]
        void PlayerLeft(System.Collections.Generic.Dictionary<string, object> playersInLobby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/PlayerKicked", ReplyAction="http://tempuri.org/IPartyManager/PlayerKickedResponse")]
        void PlayerKicked(string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyManager/GameStarted", ReplyAction="http://tempuri.org/IPartyManager/GameStartedResponse")]
        void GameStarted();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyManagerChannel : ClienteDuo.DataService.IPartyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartyManagerClient : System.ServiceModel.DuplexClientBase<ClienteDuo.DataService.IPartyManager>, ClienteDuo.DataService.IPartyManager {
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void NotifyCreateParty(int partyCode, string hostUsername) {
            base.Channel.NotifyCreateParty(partyCode, hostUsername);
        }
        
        public System.Threading.Tasks.Task NotifyCreatePartyAsync(int partyCode, string hostUsername) {
            return base.Channel.NotifyCreatePartyAsync(partyCode, hostUsername);
        }
        
        public void NotifyJoinParty(int partyCode, string username) {
            base.Channel.NotifyJoinParty(partyCode, username);
        }
        
        public System.Threading.Tasks.Task NotifyJoinPartyAsync(int partyCode, string username) {
            return base.Channel.NotifyJoinPartyAsync(partyCode, username);
        }
        
        public void NotifySendMessage(int partyCode, string message) {
            base.Channel.NotifySendMessage(partyCode, message);
        }
        
        public System.Threading.Tasks.Task NotifySendMessageAsync(int partyCode, string message) {
            return base.Channel.NotifySendMessageAsync(partyCode, message);
        }
        
        public void NotifyLeaveParty(int partyCode, string username) {
            base.Channel.NotifyLeaveParty(partyCode, username);
        }
        
        public System.Threading.Tasks.Task NotifyLeavePartyAsync(int partyCode, string username) {
            return base.Channel.NotifyLeavePartyAsync(partyCode, username);
        }
        
        public void NotifyCloseParty(int partyCode, string hostName, string reason) {
            base.Channel.NotifyCloseParty(partyCode, hostName, reason);
        }
        
        public System.Threading.Tasks.Task NotifyClosePartyAsync(int partyCode, string hostName, string reason) {
            return base.Channel.NotifyClosePartyAsync(partyCode, hostName, reason);
        }
        
        public void NotifyStartGame(int partyCode) {
            base.Channel.NotifyStartGame(partyCode);
        }
        
        public System.Threading.Tasks.Task NotifyStartGameAsync(int partyCode) {
            return base.Channel.NotifyStartGameAsync(partyCode);
        }
        
        public void NotifyKickPlayer(int partyCode, string username, string reason) {
            base.Channel.NotifyKickPlayer(partyCode, username, reason);
        }
        
        public System.Threading.Tasks.Task NotifyKickPlayerAsync(int partyCode, string username, string reason) {
            return base.Channel.NotifyKickPlayerAsync(partyCode, username, reason);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.IPartyValidator")]
    public interface IPartyValidator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyValidator/IsPartyExistent", ReplyAction="http://tempuri.org/IPartyValidator/IsPartyExistentResponse")]
        bool IsPartyExistent(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyValidator/IsPartyExistent", ReplyAction="http://tempuri.org/IPartyValidator/IsPartyExistentResponse")]
        System.Threading.Tasks.Task<bool> IsPartyExistentAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyValidator/IsSpaceAvailable", ReplyAction="http://tempuri.org/IPartyValidator/IsSpaceAvailableResponse")]
        bool IsSpaceAvailable(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyValidator/IsSpaceAvailable", ReplyAction="http://tempuri.org/IPartyValidator/IsSpaceAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsSpaceAvailableAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyValidator/IsUsernameInParty", ReplyAction="http://tempuri.org/IPartyValidator/IsUsernameInPartyResponse")]
        bool IsUsernameInParty(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyValidator/IsUsernameInParty", ReplyAction="http://tempuri.org/IPartyValidator/IsUsernameInPartyResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameInPartyAsync(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyValidator/GetPlayersInParty", ReplyAction="http://tempuri.org/IPartyValidator/GetPlayersInPartyResponse")]
        string[] GetPlayersInParty(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyValidator/GetPlayersInParty", ReplyAction="http://tempuri.org/IPartyValidator/GetPlayersInPartyResponse")]
        System.Threading.Tasks.Task<string[]> GetPlayersInPartyAsync(int partyCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyValidatorChannel : ClienteDuo.DataService.IPartyValidator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartyValidatorClient : System.ServiceModel.ClientBase<ClienteDuo.DataService.IPartyValidator>, ClienteDuo.DataService.IPartyValidator {
        
        public PartyValidatorClient() {
        }
        
        public PartyValidatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PartyValidatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PartyValidatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PartyValidatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsPartyExistent(int partyCode) {
            return base.Channel.IsPartyExistent(partyCode);
        }
        
        public System.Threading.Tasks.Task<bool> IsPartyExistentAsync(int partyCode) {
            return base.Channel.IsPartyExistentAsync(partyCode);
        }
        
        public bool IsSpaceAvailable(int partyCode) {
            return base.Channel.IsSpaceAvailable(partyCode);
        }
        
        public System.Threading.Tasks.Task<bool> IsSpaceAvailableAsync(int partyCode) {
            return base.Channel.IsSpaceAvailableAsync(partyCode);
        }
        
        public bool IsUsernameInParty(int partyCode, string username) {
            return base.Channel.IsUsernameInParty(partyCode, username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameInPartyAsync(int partyCode, string username) {
            return base.Channel.IsUsernameInPartyAsync(partyCode, username);
        }
        
        public string[] GetPlayersInParty(int partyCode) {
            return base.Channel.GetPlayersInParty(partyCode);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPlayersInPartyAsync(int partyCode) {
            return base.Channel.GetPlayersInPartyAsync(partyCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.ICardManager")]
    public interface ICardManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardManager/DrawCard", ReplyAction="http://tempuri.org/ICardManager/DrawCardResponse")]
        ClienteDuo.DataService.Card DrawCard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardManager/DrawCard", ReplyAction="http://tempuri.org/ICardManager/DrawCardResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.Card> DrawCardAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardManager/GetCards", ReplyAction="http://tempuri.org/ICardManager/GetCardsResponse")]
        ClienteDuo.DataService.Card[] GetCards(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardManager/GetCards", ReplyAction="http://tempuri.org/ICardManager/GetCardsResponse")]
        System.Threading.Tasks.Task<ClienteDuo.DataService.Card[]> GetCardsAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardManager/DealCards", ReplyAction="http://tempuri.org/ICardManager/DealCardsResponse")]
        void DealCards(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardManager/DealCards", ReplyAction="http://tempuri.org/ICardManager/DealCardsResponse")]
        System.Threading.Tasks.Task DealCardsAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardManager/PlayCard", ReplyAction="http://tempuri.org/ICardManager/PlayCardResponse")]
        void PlayCard(int partyCode, int position, ClienteDuo.DataService.Card card);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardManager/PlayCard", ReplyAction="http://tempuri.org/ICardManager/PlayCardResponse")]
        System.Threading.Tasks.Task PlayCardAsync(int partyCode, int position, ClienteDuo.DataService.Card card);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardManagerChannel : ClienteDuo.DataService.ICardManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardManagerClient : System.ServiceModel.ClientBase<ClienteDuo.DataService.ICardManager>, ClienteDuo.DataService.ICardManager {
        
        public CardManagerClient() {
        }
        
        public CardManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CardManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClienteDuo.DataService.Card DrawCard() {
            return base.Channel.DrawCard();
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.Card> DrawCardAsync() {
            return base.Channel.DrawCardAsync();
        }
        
        public ClienteDuo.DataService.Card[] GetCards(int partyCode) {
            return base.Channel.GetCards(partyCode);
        }
        
        public System.Threading.Tasks.Task<ClienteDuo.DataService.Card[]> GetCardsAsync(int partyCode) {
            return base.Channel.GetCardsAsync(partyCode);
        }
        
        public void DealCards(int partyCode) {
            base.Channel.DealCards(partyCode);
        }
        
        public System.Threading.Tasks.Task DealCardsAsync(int partyCode) {
            return base.Channel.DealCardsAsync(partyCode);
        }
        
        public void PlayCard(int partyCode, int position, ClienteDuo.DataService.Card card) {
            base.Channel.PlayCard(partyCode, position, card);
        }
        
        public System.Threading.Tasks.Task PlayCardAsync(int partyCode, int position, ClienteDuo.DataService.Card card) {
            return base.Channel.PlayCardAsync(partyCode, position, card);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.IMatchManager", CallbackContract=typeof(ClienteDuo.DataService.IMatchManagerCallback))]
    public interface IMatchManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/Subscribe")]
        void Subscribe(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/SetGameScore")]
        void SetGameScore(int partyCode, string username, int cardCount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/SetGameScore")]
        System.Threading.Tasks.Task SetGameScoreAsync(int partyCode, string username, int cardCount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ExitMatch")]
        void ExitMatch(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ExitMatch")]
        System.Threading.Tasks.Task ExitMatchAsync(int partyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/KickPlayerFromGame")]
        void KickPlayerFromGame(int partyCode, string username, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/KickPlayerFromGame")]
        System.Threading.Tasks.Task KickPlayerFromGameAsync(int partyCode, string username, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/EndGame")]
        void EndGame(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/EndGame")]
        System.Threading.Tasks.Task EndGameAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/EndTurn")]
        void EndTurn(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/EndTurn")]
        System.Threading.Tasks.Task EndTurnAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GetCurrentTurn", ReplyAction="http://tempuri.org/IMatchManager/GetCurrentTurnResponse")]
        string GetCurrentTurn(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GetCurrentTurn", ReplyAction="http://tempuri.org/IMatchManager/GetCurrentTurnResponse")]
        System.Threading.Tasks.Task<string> GetCurrentTurnAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GetPlayerList", ReplyAction="http://tempuri.org/IMatchManager/GetPlayerListResponse")]
        string[] GetPlayerList(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GetPlayerList", ReplyAction="http://tempuri.org/IMatchManager/GetPlayerListResponse")]
        System.Threading.Tasks.Task<string[]> GetPlayerListAsync(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GetMatchResults", ReplyAction="http://tempuri.org/IMatchManager/GetMatchResultsResponse")]
        System.Collections.Generic.Dictionary<string, int> GetMatchResults(int partyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GetMatchResults", ReplyAction="http://tempuri.org/IMatchManager/GetMatchResultsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetMatchResultsAsync(int partyCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/UpdateTableCards", ReplyAction="http://tempuri.org/IMatchManager/UpdateTableCardsResponse")]
        void UpdateTableCards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/PlayerLeftGame", ReplyAction="http://tempuri.org/IMatchManager/PlayerLeftGameResponse")]
        void PlayerLeftGame(string username, string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/TurnFinished", ReplyAction="http://tempuri.org/IMatchManager/TurnFinishedResponse")]
        void TurnFinished(string currentTurn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/GameOver", ReplyAction="http://tempuri.org/IMatchManager/GameOverResponse")]
        void GameOver();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagerChannel : ClienteDuo.DataService.IMatchManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchManagerClient : System.ServiceModel.DuplexClientBase<ClienteDuo.DataService.IMatchManager>, ClienteDuo.DataService.IMatchManager {
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe(int partyCode, string username) {
            base.Channel.Subscribe(partyCode, username);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(int partyCode, string username) {
            return base.Channel.SubscribeAsync(partyCode, username);
        }
        
        public void SetGameScore(int partyCode, string username, int cardCount) {
            base.Channel.SetGameScore(partyCode, username, cardCount);
        }
        
        public System.Threading.Tasks.Task SetGameScoreAsync(int partyCode, string username, int cardCount) {
            return base.Channel.SetGameScoreAsync(partyCode, username, cardCount);
        }
        
        public void ExitMatch(int partyCode, string username) {
            base.Channel.ExitMatch(partyCode, username);
        }
        
        public System.Threading.Tasks.Task ExitMatchAsync(int partyCode, string username) {
            return base.Channel.ExitMatchAsync(partyCode, username);
        }
        
        public void KickPlayerFromGame(int partyCode, string username, string reason) {
            base.Channel.KickPlayerFromGame(partyCode, username, reason);
        }
        
        public System.Threading.Tasks.Task KickPlayerFromGameAsync(int partyCode, string username, string reason) {
            return base.Channel.KickPlayerFromGameAsync(partyCode, username, reason);
        }
        
        public void EndGame(int partyCode) {
            base.Channel.EndGame(partyCode);
        }
        
        public System.Threading.Tasks.Task EndGameAsync(int partyCode) {
            return base.Channel.EndGameAsync(partyCode);
        }
        
        public void EndTurn(int partyCode) {
            base.Channel.EndTurn(partyCode);
        }
        
        public System.Threading.Tasks.Task EndTurnAsync(int partyCode) {
            return base.Channel.EndTurnAsync(partyCode);
        }
        
        public string GetCurrentTurn(int partyCode) {
            return base.Channel.GetCurrentTurn(partyCode);
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentTurnAsync(int partyCode) {
            return base.Channel.GetCurrentTurnAsync(partyCode);
        }
        
        public string[] GetPlayerList(int partyCode) {
            return base.Channel.GetPlayerList(partyCode);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPlayerListAsync(int partyCode) {
            return base.Channel.GetPlayerListAsync(partyCode);
        }
        
        public System.Collections.Generic.Dictionary<string, int> GetMatchResults(int partyCode) {
            return base.Channel.GetMatchResults(partyCode);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetMatchResultsAsync(int partyCode) {
            return base.Channel.GetMatchResultsAsync(partyCode);
        }
    }
}
